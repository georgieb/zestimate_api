import os
import requests
from dotenv import load_dotenv
from collections import defaultdict
import string

# Load environment variables from .env file
load_dotenv()

# Define the base URL of the API
base_url = "https://api.bridgedataoutput.com/api/v2/pub/parcels"

# Retrieve the API key from environment variables
api_key = os.getenv("API_KEY")

# Prompt user for a single zip code
zip_code = input("Enter a zip code: ")

# Define a function to retrieve records for owners starting with a specific letter
def get_records_for_letter(letter):
    records = []
    url = f"{base_url}?access_token={api_key}&fields=ownerName,landUseDescription&address.zip={zip_code}&limit=200&$filter=startswith(ownerName, '{letter}')"

    try:
        while url:
            response = requests.get(url)
            response.raise_for_status()  # Raise an exception for HTTP errors
            data = response.json()

            records.extend(data["bundle"])
            url = data.get("nextPage")
        
        return records
    except requests.exceptions.RequestException as e:
        print(f"Failed to retrieve data for owner names starting with '{letter}': {e}")
        return []

# Define a function to filter owner names with more than 2 records
def filter_owners(records):
    owner_counts = defaultdict(int)
    for record in records:
        if record.get("landUseDescription") == "Single Family Residential" and "ownerName" in record:
            for owner_name in record["ownerName"]:
                owner_counts[owner_name] += 1
    
    # Filter owner names with more than 2 records
    owners_with_more_than_2_records = [owner_name for owner_name, count in owner_counts.items() if count > 2]
    return owners_with_more_than_2_records

# Iterate through the alphabet and retrieve records for each letter
owners_with_more_than_2_records = []
for letter in string.ascii_lowercase:
    records_for_letter = get_records_for_letter(letter)
    owners_with_more_than_2_records.extend(filter_owners(records_for_letter))

# Display owner names with more than 2 records
print(f"Owner names with more than 2 records in {zip_code}:")
if owners_with_more_than_2_records:
    for owner_name in owners_with_more_than_2_records:
        print(owner_name)
else:
    print("No owner names found for the specified zip code with more than 2 records.")

